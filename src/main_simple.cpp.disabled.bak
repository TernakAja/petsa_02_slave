/*
 * Main implementation untuk TernakAja Livestock Monitoring System
 * 
 * Simple version without DeviceState dependency untuk menghindari compile errors
 */

#include <Arduino.h>
#include <ESP8266WiFi.h>

// Include only necessary files to avoid circular dependencies
// #include "data/remote_datasource.h"  // Uncomment when ready to use
#include "utils/others.h"

// Global instances
// RemoteDataSource remoteData;  // Uncomment when remote_datasource.h is fixed
OtherUtils utils;

// Simple sensor simulation
struct SensorReading {
    float temperature;
    float heartRate;
    float spO2;
    float batteryVoltage;
    int batteryPercent;
};

SensorReading readSensors() {
    SensorReading reading;
    
    // Simulate cattle vital signs
    reading.temperature = 38.5 + random(-20, 20) / 10.0; // 37.5 - 39.5°C
    reading.heartRate = 70 + random(-15, 15);            // 55 - 85 BPM for cattle
    reading.spO2 = 98 + random(-3, 2);                   // 95 - 100%
    
    // Real battery reading
    reading.batteryVoltage = utils.readBatteryVoltage();
    reading.batteryPercent = utils.batteryPercentage(reading.batteryVoltage);
    
    return reading;
}

void printSensorData(const SensorReading& data) {
    Serial.println("\n=== Sensor Readings ===");
    Serial.printf("🌡️  Temperature: %.1f°C\n", data.temperature);
    Serial.printf("💓 Heart Rate: %.0f BPM\n", data.heartRate);
    Serial.printf("🫁 SpO2: %.0f%%\n", data.spO2);
    Serial.printf("🔋 Battery: %.2fV (%d%%)\n", data.batteryVoltage, data.batteryPercent);
    Serial.printf("⏰ Time: %s\n", utils.getISOTime().c_str());
    Serial.printf("🆔 Device ID: %s\n", utils.getDeviceId().c_str());
    Serial.println("=====================");
}

void setup() {
    // Initialize hardware
    utils.serialTimeInitialization();
    
    Serial.println("\n🚀 TernakAja Livestock Monitoring System");
    Serial.println("💡 Simple Mode - No Cloud Connection");
    Serial.println("========================================");
    
    // Initialize LED
    pinMode(LED_BUILTIN, OUTPUT);
    digitalWrite(LED_BUILTIN, HIGH);
    
    Serial.printf("🆔 Device ID: %s\n", utils.getDeviceId().c_str());
    Serial.printf("💾 Free Heap: %d bytes\n", ESP.getFreeHeap());
    
    // Test battery reading
    float battVolt = utils.readBatteryVoltage();
    int battPercent = utils.batteryPercentage(battVolt);
    Serial.printf("🔋 Initial Battery: %.2fV (%d%%)\n", battVolt, battPercent);
    
    Serial.println("\n📝 Available Serial Commands:");
    Serial.println("   - status : Show device status");
    Serial.println("   - info   : Show device information");
    Serial.println("   - reset  : Restart device");
    Serial.println("   - test   : Run sensor test");
    
    /*
    // Uncomment when RemoteDataSource is ready
    Serial.println("🌐 Initializing cloud connection...");
    remoteData.begin();
    if (remoteData.connect()) {
        Serial.println("✅ Connected to Azure IoT Hub");
    } else {
        Serial.println("❌ Failed to connect to cloud");
    }
    */
    
    Serial.println("\n🟢 System Ready!\n");
}

void loop() {
    // Handle serial commands
    utils.onDeviceStateChange();
    
    // Read and display sensor data every 30 seconds
    static unsigned long lastSensorRead = 0;
    unsigned long now = millis();
    
    if (now - lastSensorRead > 30000) { // 30 seconds
        lastSensorRead = now;
        
        SensorReading sensors = readSensors();
        printSensorData(sensors);
        
        // Use the taskMaster function for additional processing
        utils.taskMaster(sensors.temperature, sensors.heartRate);
        
        /*
        // Uncomment when RemoteDataSource is ready
        if (remoteData.isConnected()) {
            bool sent = remoteData.sendData(sensors.heartRate, sensors.temperature, sensors.spO2);
            Serial.printf("☁️  Cloud sync: %s\n", sent ? "✅ Success" : "❌ Failed");
        }
        */
        
        // Blink LED to show activity
        digitalWrite(LED_BUILTIN, LOW);
        delay(100);
        digitalWrite(LED_BUILTIN, HIGH);
    }
    
    /*
    // Uncomment when RemoteDataSource is ready
    // Process cloud communication
    remoteData.loop();
    */
    
    // Show periodic status
    static unsigned long lastStatus = 0;
    if (now - lastStatus > 120000) { // Every 2 minutes
        lastStatus = now;
        Serial.printf("\n💚 System Running - Uptime: %lu minutes\n", millis() / 60000);
        Serial.printf("💾 Free Heap: %d bytes\n", ESP.getFreeHeap());
    }
    
    delay(1000); // Prevent watchdog reset
}

/*
 * 📋 Usage Instructions:
 * 
 * 1. Flash ke ESP8266 menggunakan PlatformIO
 * 2. Buka Serial Monitor (115200 baud)
 * 3. Lihat sensor readings setiap 30 detik
 * 4. Ketik commands di Serial Monitor:
 *    - "status" untuk status device
 *    - "info" untuk informasi detail
 *    - "reset" untuk restart
 *    - "test" untuk test sensor
 * 
 * 🔧 Next Steps:
 * 1. Fix circular dependency di remote_datasource.h
 * 2. Uncomment RemoteDataSource code
 * 3. Add real sensor drivers (MAX30105, temperature sensor)
 * 4. Test cloud connectivity
 */
